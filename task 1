{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "03c72930-3352-4579-ba73-5084e42e059b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1b333ef4-a881-4e48-83cf-9c7e7bd18556",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression as lr\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import accuracy_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fad208b6-b12d-4bc3-97f6-3dff72454ee9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdf = pd.read_csv(\"Iris.csv\")\n",
    "irisdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e5483e9c-ae3d-4587-b8a9-6b62614d6859",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>146</td>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>147</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>148</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>149</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>150</td>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  \\\n",
       "145  146            6.7           3.0            5.2           2.3   \n",
       "146  147            6.3           2.5            5.0           1.9   \n",
       "147  148            6.5           3.0            5.2           2.0   \n",
       "148  149            6.2           3.4            5.4           2.3   \n",
       "149  150            5.9           3.0            5.1           1.8   \n",
       "\n",
       "            Species  \n",
       "145  Iris-virginica  \n",
       "146  Iris-virginica  \n",
       "147  Iris-virginica  \n",
       "148  Iris-virginica  \n",
       "149  Iris-virginica  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdf.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "656798eb-ddee-40d6-9301-e18eaa13342d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150 entries, 0 to 149\n",
      "Data columns (total 6 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             150 non-null    int64  \n",
      " 1   SepalLengthCm  150 non-null    float64\n",
      " 2   SepalWidthCm   150 non-null    float64\n",
      " 3   PetalLengthCm  150 non-null    float64\n",
      " 4   PetalWidthCm   150 non-null    float64\n",
      " 5   Species        150 non-null    object \n",
      "dtypes: float64(4), int64(1), object(1)\n",
      "memory usage: 7.2+ KB\n"
     ]
    }
   ],
   "source": [
    "irisdf.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "37accb26-13b4-4110-aec5-68b1a14fb2cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "900"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdf.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "68dc9ee4-89db-4331-b5c5-a45a3da69e88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Species\n",
       "Iris-setosa        50\n",
       "Iris-versicolor    50\n",
       "Iris-virginica     50\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdf['Species'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "03da1ca2-179c-4413-866f-d40eb676e502",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 6)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "249f8b98-9175-47b9-9036-c36779762ad6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='count'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "irisdf['Species'].value_counts().plot(kind='pie',autopct='%.2f')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5578272b-60fb-4bad-933e-212ddad17c80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id               0\n",
       "SepalLengthCm    0\n",
       "SepalWidthCm     0\n",
       "PetalLengthCm    0\n",
       "PetalWidthCm     0\n",
       "Species          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdf.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2795e243-21f7-488d-be5e-e246a665f6dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "duplicate_count = irisdf.duplicated().sum()\n",
    "print(duplicate_count)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6f495e39-94be-470e-bd2b-9426139bf9f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x268cf7a76b0>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZ8AAAEiCAYAAAAmtt8/AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAABOvElEQVR4nO3dd1wUV9cH8N8sSFGWYqGoNBE0KBhREpEEhGB/jRoLligYo1ExxvAYiaZo1NiS2JJoqkrsLSJJFDvYBUUQY0ERxQKChSZNd+f9Y90NK1tmC9s43+fDJ8/OzN65s+ge594z5zIsy7IghBBCdIin7w4QQghpeCj4EEII0TkKPoQQQnSOgg8hhBCdo+BDCCFE5yj4EEII0TkKPoQQQnSOgg8hhBCdM+rgw7IsSktLQc/JEkKIcTHq4FNWVgY7OzuUlZXpuyuEEEJUYNTBhxBCiHHSa/Dx8PAAwzB1fmJiYvTZLUIIIfXMXJ8nT0tLg0AgkLy+dOkSevbsiWHDhumxV4QQQuqbXoNPixYtpF4vXrwYXl5eCA0N1VOPCCGE6IJeg09tNTU12LhxI2JjY8EwjL67Y1AEQgHSC9NRVFGEFo1bIMAxAGY8M313ixBC1GYwwSchIQHFxcWIjo6We0x1dTWqq6slr0tLS3XQM/06dPsQFqcuxoOKB5JtTo2d8OlrnyLCPUKPPSOEEPUZTLbb77//jr59+6Jly5Zyj1m0aBHs7OwkP66urjrsoe4dun0IscmxUoEHAAorChGbHItDtw/pqWeEEKIZxhBWMr19+zbatGmDP//8EwMHDpR7nKw7H1dXV5SUlMDW1lYXXdUZgVCA3rt61wk8YgwYODV2QtKQJBqCI4QYHYMYdlu3bh0cHR3Rv39/hcdZWlrC0tJSR73Sr/TCdLmBBwBYsCioKEB6YToCnQN12DNCCNGc3ofdhEIh1q1bh6ioKJibG0QsNAhFFUVaPY4QQgyJ3oPPoUOHkJeXh/fee0/fXTEoLRq3UH6QCscRQogh0futRq9evagwqAwBjgFwauyEwopCsKj7+YjnfAIcAzi1R+na2kGfIyHaoffgQ2Qz45nh09c+RWxyLBgwUgGIgeg5qLjX4jh98VG6tnbQ50iI9hhEtpu6SktLYWdnZ5LZbmKyvvCcGzsj7rU4Tl944nTtl++exAFsWY9l9MXJAX2OhGgXBR8joO5QD6Vrawd9joRoHw27GQEznpla6dTaTNduyHMdlPZOiPZR8DFh2krXbuhzHZT2Toj26T3VmtQfbaRrU4kfSnsnpD5Q8DFh4nRt8aT4yxgwcG7sLDddWyAUYHHqYpmp3uJtS1KXQCAU1NlvSjT9HAkhdVHwMWHidG0Adb44uaRrqzLXYco0/RwJIXVR8DFxEe4RWNZjGRwbO0ptd2rspDQ9mOY6/qPJ50gIqYsSDhqACPcIhLmGqZytRnMd0tT9HAkhdVHwaSDUSdfWdokfQggRo+BD5NJmiR9T0NBTzgnRJprzIQrRXIcIpZwTol1UXocAUF7BoCFXOKDyOoRoHw27EU7DSeqW+DEFVF6HEO2jYbcGjoaTlKOUc0K0j4JPA0YVDLihlHNCtI+CTwNGFQy4ofI6hGgfBZ8GjIaTuKHyOoRoHwWfBoyGk7ijlHNCtIuy3RoIWanSqlQwMJVUa02ug8rrEKI99JxPA6AolRoAYpNjAUBmBYNlPZYBgEk82U8VCggxHBR8TJw4lfrlOxtlwcW5sTPiXosDAKXvN4Yvbi6fgzFcByGmgoKPCVPlyXwAdYaTAJjEk/1UoYAQw6P3hIN79+7h3XffRbNmzWBtbQ0/Pz+cO3dO390yCaqkUosrGPRr0w+BzoEw45lpPRVbIBQgrSANe2/uRVpBWp3nh5TtVxellBNiePSacPDkyRMEBwcjLCwM+/btQ4sWLXD9+nU4ODjos1smQ9NUam2mYiubb6nP+RhKKSfE8Og1+CxZsgSurq5Yt26dZJunp6cee2RaNE2l1lYqtrz5FnEJn+gO0Vj/73q5+zWdj6GUckIMj16H3RITE9G1a1cMGzYMjo6O6Ny5M3799Vd9dsmkaPpkvjae7OdSwif+cny9lvihCgWEGB69Bp+bN29izZo18Pb2xv79+zF58mRMmzYN8fHxMo+vrq5GaWmp1A+RT9Mn88XvlxUYAFFwUPZkP5f5FiErVLhf0/kYqlBAiOHRa/ARCoUICAjAwoUL0blzZ0ycOBETJkzATz/9JPP4RYsWwc7OTvLj6uqq4x4bH30/ma+teRRN29H350AIkabXOR8XFxf4+vpKbXvllVewa9cumcfPmjULsbGxktelpaUUgDhQ98l88ZCZPAwYLEldgjDXMLltNbNuplHfxbQxH0MVCggxHHoNPsHBwbh27ZrUtuzsbLi7u8s83tLSEpaWlrromk7ponSNOovBaWMRNU0fI6td4kcbGvKieIQYEr0Gn48//hjdu3fHwoULMXz4cKSmpuKXX37BL7/8os9u6ZQhl3zRRory46rHnM/HgJFZ4ofmYwgxPXqd8wkMDMTu3buxZcsWdOzYEfPnz8eKFSswevRofXZLZwx9FVFtpChzbSOmUwzNxxDSgFB5HT0xhpIvlTWVeG3La0qPSx2ZCmsLa5n7xNeprHJ20pAk1DyvwbL0Zbhdehvutu6IDYiV2y4hxLjpvbxOQ2UMJV923tip8XFc07VXpq9Et63dsPXaVpzOP42t17ai29ZuWHZumVp9J4QYNlrPR0+MoeTLndI7Wj1OnsScRBy9c7TOdiErxLp/RdUvYrvG1tlPCDFedOejJ8ZQ8sXVllsau6LjlKVrA5AZeGqLvxyPmuc1nPpCCDEOdOejJ7peRbTmeQ22ZW/DndI7cLV1RaRPJCzMLST7ZZ0j0icS3577VmEFAh7DQ6RPpNw+Khte5ELICrEtextGtR9Fz+gQYiIo4UCPxNluQP2uIrrs3DLEX46XCiI8hoco3yjEdo1VmO59seiiZOhLlnEdxsG/hb/c99cIahB3PI5TPxV5o+UbuF583SBT0gkhqqPgo2eyvvi1uYrosnPLFAaPMNcwJN9JVniOi0UX5QYv/xb+Cvs45dUp+DHjR4V9VBetQkqI8aLgYwBkDVkBmq8iWvO8BoGbAxUOmylS+xyVNZWYfWo27pbdRWt+ayzsvhDWFtZK++jY2BEsy6KoskhuxpsmDCElnRCiOprzMQCySr6kFaRpXNpmW/Y2tQNP7XN8evxTHLh9QNLW9eLrCN4ejF7uvZT28UHFA8R0isHqzNVyKxj0cO2hNOlAWR8VfQ6EEMND2W4GShup2JqmQIsl3UqqE8SErBBJt5I4vd/N1k1hRelV4aswrsM48BjpP448hofQVqGczkGrkBJiXOjOx0BpIxWba6p0fWtq1RTdWnZTWFE6tmsspr46tU5GXubDTKTcS1F6DlqFlBDjQsHHQKmSii0Pl1RpXWAY0fCasorSFuYWGOM7RmqbNj4HQojhoWE3A6WN1TctzC0Q5Rul8DxhrmFgXvxP1jm04VHlI7Xfq43VVAkhhoeCjwHTxuqbsV1j5c6njOswDqvCV8k9xyCvQRpfA0BDYoSQuijV2ghwqXCg7Bh1KhwIhAKNUrUBUZBLG5UGC3MLtSo1GEP1b0KI6mjOxwgomyvhsiCdrPkUZecw45khyjdK4UOqyghZITIfZqKkukStSg3aWE2VEGJ4aNjNyNX3gnSKhu1CW3NLgz6ad1TtPhpD9W9CiOrUHnarqqrCxYsXUVhYCKFQeljm7bff1krnlGkow27y6HJIStawXebDTLy3/z2l73WwdMCT6idq9TGtII3TOdb2Xkt3PoQYEbWG3ZKSkjB27Fg8fPiwzj6GYSAQCDTuGFFO30NSXNKgHawc8Ljqsdp9pFRrQkyTWsNuH374IYYNG4b8/HwIhUKpHwo8uqOrIall55YhcHMglqYtxZZrW7A0bSkCNwdiZfpKpeng/T37a9RHbaScE0IMj1rB58GDB4iNjYWTk5O2+0NUoIsF6cRVsWWV11n37zpcLLqoMB08zC1M4z5qI+WcEGJY1Bp2Gzp0KJKTk+Hl5aXt/hAVqDIkpSzVWpaa5zWIvxyv8Jj4y/FIG5WGkMEhMtsXCAVaGTaLcI9QWJ6HEGJc1Eo4qKiowLBhw9CiRQv4+fmhUaNGUvunTZumtQ4q0tATDgBRttvHyR8DLAswtYalXrxe3mO5wvV4YrvGym17w+UNWJq2VGkfBnkNwun803LTqCV9lGN5j+V090JIA6PWnc+WLVtw4MABWFlZITk5WVK7CxAlHOgq+BDg4pU/RYFGFpbF76nf4lLFvTq7xMNmAOQGIK5VsRNyEupsE6dRi1djJYSQ2tS683F2dsa0adPw6aefgsfT36NCDf3Op6amUlSBAJC+6xET/2pl7XuhdgWCl8X/G49vz32rdv9qLyZXWFko9xiqUEBIw6NW5KipqUFkZKTGgWfu3LlgGEbqp3379hq1qW0CoQBpBWnYe3Mv0grSIBBqP5uv5nkNNlzegIVnFmLD5Q2oeV7D6X3bzi6BkGHkBxdF+14QskJsy94mc5+3vTenfsgjXkxOXuARHyNOtSaENBxqDbtFRUVh27ZtmD17tsYd6NChAw4d+u8Jd3Nzw6n4w6VsjaaWnVtWZz7m23PfKp2PAYA7pXla6YO84bXi6mKttM8FVSggpGFR65teIBBg6dKl2L9/P/z9/eskHCxbxn2c39zcHM7Ozup0o16Jy9a8nKFVey5D0wAkTmN+GZf5GABwtXUDHqZp1AdRO7IXndNlNWqqfE1Iw6LWuFlWVhY6d+4MHo+HS5cu4cKFC5KfjIwMldq6fv06WrZsiTZt2mD06NHIy9POv+Y1IRAKsDh1sczUYPG2JalLNBqC45rGrGgILvL1OPBYVmHCgdx9L/AYHiJ9ImXuC2jeCU4CFoycNhiWFZ1fDvF8jqO1o9z1gRgwcG7sTBUKCGlg1LrzOXr0qFZO/vrrr2P9+vVo164d8vPz8dVXX+HNN9/EpUuXwOfz6xxfXV2N6upqyevS0lKt9ONluihbsy17m9KlCsTzMfKqUVtYWCPKOQTrCo7JTrUG0LFJa5nZbmJRvlFyn/cxu3MWnz58iI8dm8tsnwUQXVKK9fZ2ote1sx5ZFmAgqU4QmxwLBoxUQKcKBYQ0XCrd+QgEAly8eBGVlZV19lVWVuLixYt1iowq0rdvXwwbNgz+/v7o3bs39u7di+LiYmzfvl3m8YsWLYKdnZ3kx9VV9nCRpnRRtoZrGrOy4/xfeUdhwkGgZy/F72/hL39nufwALHl/dQ2WPSiC40tllZwEAix78BARTyuoQgEhpA6V7nw2bNiAH374AWfPnq2zr1GjRnjvvfcwffp0vPvuu2p1xt7eHj4+Prhx44bM/bNmzUJs7H9zIKWlpfUSgHRRtsbVppXGx4mHBwHUDUCMaGlsRUN7DBgsSV2CMNcwmXcegiYtsLiZg/z2WRZLmjkg6c59hFVUIt3KEkVmZmghECCgqhpmYICkT4H2/alCASFEikp3Pr///jtmzJgBM7O6Xxjm5uaYOXMmfvnlF7U7U15ejpycHLi4uMjcb2lpCVtbW6mf+iAuW1Of8xSR1m5K52t4LItIaze5bXAZHlQ0tKcszTndyhIPzM3l3lmxDIMCc3OkW1nCDEBgVTX6Pa1AYFU1zF6cAaX3gNunAEB0TGWV6JjKKlDYIaThUin4XLt2Dd26dZO7PzAwEFeuXOHc3owZM5CSkoJbt27h1KlTGDx4MMzMzDBy5EhVuqV1uqikbFHxCFElL+asXg5AL15HlZTCouKR3Da0lZ4sr50iBUshSB0n4x8jUsofAJcTgRUdgfj/A3aNF/13RUfRdkJIg6NS8Hn69KnCSf6ysjJUVFRwbu/u3bsYOXIk2rVrh+HDh6NZs2Y4c+YMWrTQf9ptvc9T2Dgh9kkJxpWU1vkl8ACMKylF7JMSwEZ+5XBtpSfLa4fz8KOyZTQe5QDbxwKl96W3l+aLtlMAIqTBUWnOx9vbG6dOnYK/v+xJ6hMnTsDbm/tT8Vu3blXl9DpXr/MU7t0B25aIfZKPqU9KsM3WBnfMzeH6/DkiS8thAQawbSU6Tg5lVa0BKC6xw7LgAejUtCMgFIiGx8ofiAKee3d0at4JPIancOiOx7LoVCUvHZwB+C5A+npAZv9Y0TEv5oUA1OkDaE6IEJOkUvAZNWoUPv/8c3Tv3r1OAMrMzMSXX36JmTNnarWD+mbGM6uf5Zl5ZkCfJcD2sbAAgzGl5bV2vggUfRYr/PIVDw/KS2NmwSour8MwEALIPDIbgZeTpO9MbFsis/sHytPBGQaZVhYIrKqWsZcFukQDyQsVtPBiXujYt6Ig9VIf0GcJ4KubZdkJIbqjUmHRZ8+eoVevXjhx4gQiIiIkddiuXr2KQ4cOITg4GAcPHqxT8aC+mERh0cuJQFLcS1+6rUSBh+OXrqwyQM6NndGziQc2FJ1R+v4lhQ/R7+nLw6UM9jZpjDjHZmq+/4VuU4Azq5W2IduLwDn8DwpAhJgYlataP3v2DMuXL8fmzZtx/fp1sCwLHx8fjBo1CtOnT4eFheIFyrTJJIIPIHPIS9XhJoFQUGd4MD1jLd7LWqX0vWvzH8i8c0mzssJ7Lo4y3sHt/QADNG4GVDzkcglyMKI7oOlZNARHiAlRa0kFQ2EywaeeCG4cQe+UGBSamUlVHxBjWBZOAgGS7tyXmfYsANDbtSUKzc1lztgwAJyeP5f7fq2K+hvwfLO+z0II0RGN1kSoqanB3bt3kZeXJ/VDDINZ5WN8+ugJANSpzyZ+HffoidzAYQZo9H6t4lBtgRBiPNQKPtnZ2XjzzTdhbW0Nd3d3eHp6wtPTEx4eHvD09NR2H4m6bJwQUVGJZYUPZZe/KXyIiIq6pZJqi6ioVFA+p0jp+7VGQco5IcT4qFVYdNy4cTA3N8fff/8NFxcXqWW0TY4W5mOUkTVfo5V0btfXAYaHiIpKOeVvuJH/fgZgeIDcjLgX8zWsECgrgOx0a7xog5Wz/0Ub7t118rsghOiGWnM+TZo0wfnz5/W+6mi9z/nIzETTbvpvvS5Yl3tcVElAJxhIB49amWoAsF12ZW4AQPdpwKnvX7xQ0EY9/y4IIbqj1rCbr68vHj7UJIPJCFxOrPen8sUL1r1cn028YN2h24fkvJMjXc2TdJsC2L5Uj8+2JfcU6daBomPltQFQhQRCTAznO5/aZXXOnTuHzz//HAsXLoSfn1+d53p0lXlWb3c+QoGo7tjLX3YSmqf/CoQC9N7VW25hUPFCbElDktQfgstJBjYMVO+9qng3AWgTIntITJXPEqjbBlDvvwtCiO5xnvOxt7eXmtthWRZvvfWW1DEsy4JhGAiU1foydLdPKfiyA6SqNXu+qdZchEoL1jkGqDfXoau5uMJLouAji6qf5cvp1LnHVXs/IcQocA4+2lq91ChwHa4SV2tWYy6C84J115OAzWPVm+t4qp2q10rdTBFVMZDVR4H8ZcClyPvMVfldEEKMBufgExoaKvn/eXl5cHV1rZPlxrIs7tzhtkKnQeOa1vsoB0hehDpZWuK5CAVzHpwrRp/8AaiqUrl9ALpLT75xsO42cR97zOLWhry+cr0GSsUmxKiolXDg6emJoqK6/6p+/PixaTzn86LiNCBv2IoB+C2VVGuGqFqzUPYQJKcF6wQsAl4OPBzb53YdEKU5K9qvthd9TI8XVbZW9Fkqqt7N5XehpPo3IcTwqBV8xHM7LysvL4eVlZXGndI7ccVpAHW/9F687hLNfS5CBuUL1rGIe/hQwbM4itsHwOE6GCBoKuQ+f6OxF33sMk5BH6C4ejeX34WS6t+E6BvDMEhISNB3NwyKSg+ZxsbGAhB9kF988QUaN24s2ScQCHD27Fm8+uqrWu2g3vi+LRrWkjmfs1jzuQz8t2CdrOd84pxCEJH7rUbtA1B+HXfTlJ9DU828FPdB2dyVsmug53yIAkVFRfjyyy/xzz//4MGDB3BwcECnTp3w5ZdfIjg4WCd9yM/Ph4ODg07OZSxUCj4XLlwAILrzycrKkqpgbWFhgU6dOmHGjBna7aE++b4tWuRMVqZZ7nFubSiZi5C7YN3tUwA4BB8ucx3yrkMoAHZEcbsOTdg4iTLR5H2WXCj6XRCiwJAhQ1BTU4P4+Hi0adMGDx48wOHDh/Hokfwl6rXN2dlZZ+cyFmpVOBg3bhxWrlyp90rSeq1qLXl+JR8Ky8Ko+/yJqu2rU3rm9I/A/tmq9612HxhGeXkdegaH6ElxcTEcHByQnJwslTRVG8MwWL16NRITE5GcnAwXFxcsXboUQ4cOlRxz584d/O9//8OBAwfA4/Hw5ptvYuXKlfDw8JAcs3btWnz33Xe4ceMGmjZtiiFDhuCHH36QnGP37t0YNGgQp/aSk5Mxc+ZM/Pvvv2jUqBE6dOiAzZs3w93dvV4+J31Qa85n3bp1eg88elffcxGqtH85URSo4v8P2DVe9N8VHZU/+f/klnp9k2BfzBkxyvtIiB7Y2NjAxsYGCQkJqK6WteaUyBdffIEhQ4YgMzMTo0ePxogRI3DlyhUAojXMevfuDT6fj+PHj+PkyZOwsbFBnz59UFMjGn5fs2YNYmJiMHHiRGRlZSExMRFt27aVeS5l7T1//hyDBg1CaGgoLl68iNOnT2PixIkmV0NTrTufd955R3ZjDAMrKyu0bdsWo0aNQrt27TTuoCIGsZ6PFlYi1ah9cRmgOndHHFYB1fjOB6K6bK0D6/czIEQDu3btwoQJE1BZWYmAgACEhoZixIgR8Pf3ByD63po0aRLWrFkjeU+3bt0QEBCA1atXY+PGjViwYAGuXLkiCQA1NTWwt7dHQkICevXqhVatWmHcuHFYsGCBzD7UvvNR1l7Xrl3RrFkzhXdrpkCtqta2trZISEiAvb09unTpAgBIT09HcXExevXqhW3btmHJkiU4fPiwzib09Ka+5yIUtS8UiL705aZ7M6J07Pb9RZtebqPLe5oHn9M/Ap8V0HwMMVhDhgxB//79cfz4cZw5cwb79u3D0qVL8dtvvyE6OhoAEBQUJPWeoKAgZGRkAAAyMzNx48YN8Pl8qWOqqqqQk5ODwsJC3L9/v07FF3mUtderVy9ER0ejd+/e6NmzJyIiIjB8+HC4uLjIadE4qRV8nJ2dMWrUKPzwww/g8UQjd0KhEB999BH4fD62bt2KSZMmIS4uDidOnNBqhw0Sz6x+S7vIa59r6Zpj34qeSXo5UywgWvO+sQIg7VcgKIbK2xCDZWVlhZ49e6Jnz5744osv8P7772POnDmS4KNIeXk5unTpgk2bNtXZ16JFC8l3IFfK2gNEUxvTpk1DUlIStm3bhs8//xwHDx5Et27dVDqXIVNrzuf333/H9OnTpT50Ho+HDz/8EL/88gsYhsHUqVNx6dIlrXWUyMC1pEzyQtkVoZMXaqcfGs8dEaJbvr6+ePr0qeT1mTNnpPafOXMGr7zyCgAgICAA169fh6OjI9q2bSv1Y2dnBz6fDw8PDxw+fJjTuZW1J9a5c2fMmjULp06dQseOHbF582YtXLnhUCv4PH/+HFevXq2z/erVq5KiolZWViY3QWZwmnAr0SObFh8stXPTXluEaNGjR48QHh6OjRs34uLFi8jNzcWOHTuwdOlSDBz4X8X3HTt2YO3atcjOzsacOXOQmpqKqVOnAgBGjx6N5s2bY+DAgTh+/Dhyc3ORnJyMadOm4e7duwCAuXPn4rvvvsOqVatw/fp1pKen4/vvv5fZJ2Xt5ebmYtasWTh9+jRu376NAwcO4Pr165JgaCrUGnYbM2YMxo8fj9mzZyMwMBAAkJaWhoULF2Ls2LEAgJSUFHTo0IFzm4sXL8asWbPw0UcfYcWKFep0q35wSWHWdIVNZe+Xt1/1XJH64cT990yILtnY2OD111/H8uXLkZOTg2fPnsHV1RUTJkzA7Nn/zXd+9dVX2Lp1K6ZMmQIXFxds2bIFvr6+AIDGjRvj2LFjiIuLwzvvvIOysjK0atUKb731liTRKSoqClVVVVi+fDlmzJiB5s2bS6Vq16asvcrKSly9ehXx8fF49OgRXFxcEBMTgw8++KD+PzAdUivbTSAQYPHixfjhhx/w4IFo6MfJyQkffvgh4uLiYGZmhry8PPB4PLRu3Vppe2lpaRg+fDhsbW0RFhbGOfgYxEqmmq52quz9ivYLakSp1VohayVSjn80hvwO+Mn+i0aIoXv5GRyiG2oNu5mZmeGzzz5Dfn4+iouLUVxcjPz8fMyePRtmZqJ/sbu5uXEKPOXl5Rg9ejR+/fVXwyo/wWUlU01XO1X2/gNfKN7/KEe9a3tZj9myVxHtwTETjipKE0JUpNawW22a3nHExMSgf//+iIiIkJsjr3NcU5hZofJj2veXPQSn9BwATv+guH1xxeiyAjnHccCYAW98DITMkL2KaPp65VUWqKI0IURFagWfBw8eYMaMGTh8+DAKCwvx8sgd15VMt27divT0dKSlcStuWV1dLfWUcu2lvbWKawqzQkpW2FR6DigoW1Or/R6zNctaYwXAnbOyVxEFRMN728dC9rAcqIIBMXpqzDwQLVAr+ERHRyMvLw9ffPEFXFxc1Mpqu3PnDj766CMcPHiQ8zIMixYtwldffaXyuVSmzVUxNV2hU5l75zVvQ1FfqKI0IaQeqJVwIK5JpMnyCQkJCRg8eLBkjggQ3TExDAMej4fq6mqpfYDsOx9XV1ftJxzkHhfVR9OGqL9l31HcTAH+0MYXtwqJAfLI62Ntmmb0EUJILWrd+bi6ump8q/rWW28hKytLatu4cePQvn17ScbcyywtLWFpaanReTkRr56pbK6DFSqYb6k1HyLri1vjW30GsLIFqko0a4PrnE19V3EghDQoagWfFStW4NNPP8XPP/8sVVJcFXw+Hx07dpTa1qRJEzRr1qzOdp0TV5RWNtcBKD/m6j+yh6x8B6nQITntt34NuHFQszZozoYQogdqpVpHRkYiOTkZXl5e4PP5aNq0qdSPSRDPdchKQRZXilZ2DCA/VfrMam79kJcGPfwPwCuMWxudRiu+DkII0TG15nzi4+MV7o+K0sHqmNDRkgrqVjgAXiwGJy+jTYWF2ADZfXheA3ztpDgrjjETVZ3mmdGcDSHEYKgVfAyFQaznI49KSQtyhsS43Jkc+AI4tUr+/u7TgF7zOfaDkIaHKhzoh1rDbgCQk5ODzz//HCNHjkRhYSEAYN++ffj333+11jmjxjWVutsUzYbEes0XBRjmpV8lY0aBhzR40dHRSoNKfn4++vbtq5sOvWTu3LkaZQ0bM7USDlJSUtC3b18EBwfj2LFj+Prrr+Ho6IjMzEz8/vvv2Llzp7b7aXwaN+d2nHdvoNcCzYbEes0Hwr8Qravz5Bbg4AEETgDMLdTpOSH1QiBkkZr7GIVlVXDkW+E1z6Yw4+mv8n1NTQ0sLCzg7Oystz40ZGrd+Xz66adYsGABDh48CAuL/77gwsPD66yL0WBxffCWYf5LY/YbKvqvOnMx5haiBd36fSP6r6qBRygQDRVm7RT9V8itSgUhXCRdyscbS45g5K9n8NHWDIz89QzeWHIESZfyddaHHj16YOrUqZg+fTqaN2+O3r17AxANuyUkJAAQBaSpU6fCxcUFVlZWcHd3x6JFi+S2qez44uJivP/++2jRogVsbW0RHh6OzMxMAMD69evx1VdfITMzEwzDgGEYrF+/HgCQl5eHgQMHwsbGBra2thg+fLikiDMgWg01LCwMfD4ftra26NKlC86dOwdAtIzEyJEj0apVKzRu3Bh+fn7YsmWLNj9KrVDrzicrK0vmwkaOjo54+PChxp0yCU+LtHtcfdK0MjchCiRdysfkjel1noYrKKnC5I3pWPNuAPp01M0S0fHx8Zg8eTJOnjwpc/+qVauQmJiI7du3w83NDXfu3MGdO3fktqfs+GHDhsHa2hr79u2DnZ0dfv75Z7z11lvIzs5GZGQkLl26hKSkJBw6dAgAYGdnB6FQKAk8KSkpeP78OWJiYiRZxoBoTaDOnTtjzZo1MDMzQ0ZGBho1agRAtBx3ly5dEBcXB1tbW/zzzz8YM2YMvLy88Nprr2npk9ScWsHH3t4e+fn58PT0lNp+4cIFtGrVSisdM3pcKz3ruyK0uLL2y18N4srZlI5NNCAQsvjqr8uKyuPiq78uo6evs06G4Ly9vbF06VK5+/Py8uDt7Y033ngDDMPA3d1dYXuKjj9x4gRSU1NRWFgoeTj+22+/RUJCAnbu3ImJEyfCxsYG5ubmUkN/Bw8eRFZWFnJzc+Hq6goA+OOPP9ChQwekpaUhMDAQeXl5+OSTT9C+fXvJdYm1atUKM2bMkLz+8MMPsX//fmzfvt2ggo9aw24jRoxAXFwcCgoKwDAMhEIhTp48iRkzZkgWkzMY+hpOEldJgLy/UAxg24pbdYH6ugYulbWTPqUhOKK21NzHyC+pkrufBZBfUoXU3Mc66U+XLl0U7o+OjkZGRgbatWuHadOm4cCBA5J9kyZNgo2NjeRH2fGZmZkoLy9Hs2bNpN6Xm5uLnBz5y6FcuXIFrq6uksADiJb9tre3x5UrVwAAsbGxeP/99xEREYHFixdLtScQCDB//nz4+fmhadOmsLGxwf79+5GXl6fah1XP1LrzWbhwIWJiYuDq6gqBQABfX18IBAKMGjUKn332mbb7qD59DidxrZKgbH6nPq+Ba/VueZW5CVGisEx+4FHnOE01adJE4f6AgADk5uZi3759OHToEIYPH46IiAjs3LkT8+bNk7qjUHZ8eXk5XFxcJENltdnb22t0HXPnzsWoUaPwzz//YN++fZgzZw62bt2KwYMH45tvvsHKlSuxYsUK+Pn5oUmTJpg+fTpqamo0Oqe2qRV8LCws8Ouvv+LLL79EVlYWysvL0blzZ6lbP70zhOEkTStC1/c1cE0H12aVb9KgOPK5Vaznepwu2NraIjIyEpGRkRg6dCj69OmDx48fw9HREY6OjpyPDwgIQEFBAczNzeWWIbOwsKizBM0rr7wimTsS3/1cvnwZxcXFkqW9AcDHxwc+Pj74+OOPMXLkSKxbtw6DBw/GyZMnMXDgQLz77rsAAKFQiOzsbKn3GgKNFpN7+dbw4sWL6Nq1q/4jLNfF4OQt9KZNvm+LzqNqKrUursFY5qWI0XrNsylc7KxQUFIlr/wunO1EadeGYNmyZXBxcUHnzp3B4/GwY8cOODs7y71TUXR8REQEgoKCMGjQICxduhQ+Pj64f/8+/vnnHwwePBhdu3aFh4cHcnNzkZGRgdatW4PP5yMiIgJ+fn4YPXo0VqxYgefPn2PKlCkIDQ1F165dUVlZiU8++QRDhw6Fp6cn7t69i7S0NAwZMgSAaP5n586dOHXqFBwcHLBs2TI8ePDA4IKP2g+ZysKyLOeF5OqVKsNJuqBOKrUurkGb81KEyGDGYzBngOhL7+U/ZeLXcwb46vV5n9r4fD6WLl2Krl27IjAwELdu3cLevXvB48n+qlR0PMMw2Lt3L0JCQjBu3Dj4+PhgxIgRuH37NpycRP+gGzJkCPr06YOwsDC0aNECW7ZsAcMw2LNnDxwcHBASEoKIiAi0adMG27ZtAwCYmZnh0aNHGDt2LHx8fDB8+HD07dtXstbZ559/joCAAPTu3Rs9evSAs7OzQVZv0Gp5nczMTAQEBOgsAMktr5O1E9g1XnkDQ34XBQRDpKtrkAztAWqX+CFEiaRL+fjqr8tSyQcudlaYM8BXZ2nWxLBoNOxmsExhOElX10ArlRId6NPRBT19nQ2qwgHRL5WCT2lpqcL9ZWVlGnVGa7guBqet4SRlla/VWQVUl9eg7rwUISow4zEI8mqm724QA6FS8LG3twejoGwMy7IK9+uMttKcuVCWCq1uqrQur0F8PkqnJoToiEpzPikpKZyOCw0NVbtDqlC6pILML/5W2htOkpcKLQ4O3T8ETn0vfz+X+ZT6vgZCCNED01/PR50hLy6EAu0tFscl7ZqGxAghJoTzsJuy+Z7aDGpht/oaTuKSCq0wrqtQPYCGxAghJoZz8FE23wP8N+djEM/61DdtPfVP1QMIIQ0Q5+Bz9OjR+uyH8dFWmrYhp3sTQkg94Rx8dJVEYDS4pEJzmfOh6gGE6BXDMNi9e7dBVgGQx8PDA9OnT8f06dMNsj0uNHrItKKiAnl5eXVqufn7+2vUKaPAJRU6aOqLbDfI3q/NVGlCSB3R0dEoLi6WrFQqS35+PhwcHHTXKS1IS0tTWqHb0KkVfIqKijBu3Djs27dP5v4GMecDcKsO0DqQqgcQYoBqampgYWEhtZCbIRD3S5EWLVroqDfccOnzy9QqLDp9+nQUFxfj7NmzsLa2RlJSEuLj4+Ht7Y3ExER1mjRevm8D0y8BUX+L6qxF/S1KnxYHFmX7CWko9LWw4ws9evTA1KlTMX36dDRv3hy9e/cGIBp2E98Z1dTUYOrUqXBxcYGVlRXc3d2xaNEime1lZ2eDYRhcvXpVavvy5cvh5eUleX3p0iX07dsXNjY2cHJywpgxY/Dw4UOF/WJZFnPnzoWbmxssLS3RsmVLTJs2TfIeDw8PrFixQvK6uLgYH3zwAZycnGBlZYWOHTvi77//luzftWsXOnToAEtLS3h4eOC7775T+Fnl5eVJlvK2tbXF8OHD8eDBf8lRc+fOxauvvorffvsNnp6esLJSfUkMte58jhw5gj179qBr167g8Xhwd3dHz549YWtri0WLFqF///6c2lmzZg3WrFmDW7duAQA6dOiAL7/8En379lWnW/qjLBVa2X56joeYOn0u7FhLfHw8Jk+ejJMnT8rcv2rVKiQmJmL79u1wc3OTrKsji4+PD7p27YpNmzZh/vz5ku2bNm3CqFGjAIiCQnh4ON5//30sX74clZWViIuLw/Dhw3HkyBG5/dq1axeWL1+OrVu3okOHDigoKEBmZqbMfgiFQvTt2xdlZWXYuHEjvLy8cPnyZZiZib5Dzp8/j+HDh2Pu3LmIjIzEqVOnMGXKFDRr1gzR0dEy2xMHnpSUFDx//hwxMTGIjIyUWhjvxo0b2LVrF/7880/JuVTCqoHP57O5ubksy7Ksm5sbe+LECZZlWfbmzZustbU153YSExPZf/75h83OzmavXbvGzp49m23UqBF76dIlTu8vKSlhAbAlJSUqX4PB+HcPy37XnmXn2P7381170XZCTMG/e1h2jp30n/E5ti+22dXrn/WoqCh24MCBLMuybGhoKNu5c+c6xwBgd+/ezbIsy3744YdseHg4KxQKObW/fPly1svLS/L62rVrLAD2ypUrLMuy7Pz589levXpJvefOnTssAPbatWty+/Xdd9+xPj4+bE1Njczzuru7s8uXL2dZlmX379/P8ng8SXsvGzVqFNuzZ0+pbZ988gnr6+srs70DBw6wZmZmbF5enmT/v//+ywJgU1NTWZZl2Tlz5rCNGjViCwsLZZ6TC7WG3dq1a4dr164BADp16oSff/4Z9+7dw08//QQXF+7l0QcMGIB+/frB29sbPj4++Prrr2FjY4MzZ86o0y3jIy7P8/LDquKVSi83sCFMYnqULooI0aKIOhqC69Kli8L90dHRyMjIQLt27TBt2jQcOHBAsm/SpEmwsbGR/ADAiBEjcOvWLcl31qZNmxAQEID27dsDEC0zc/ToUan3iffl5OTI7dewYcNQWVmJNm3aYMKECdi9ezeeP38us8/iheh8fHxk7r9y5QqCg4OltgUHB+P69esy5+evXLlSZ6FQX19f2Nvb48qVK5Jt7u7uGs09qRV8PvroI+Tn5wMA5syZg3379sHNzQ2rVq3CwoUL1eqIQCDA1q1b8fTpUwQFBanVhlExsL+UhNQLA1vYUVmGWEBAAHJzczF//nxUVlZi+PDhGDpUtF7WvHnzkJGRIfkBAGdnZ4SHh2Pz5s0AgM2bN2P06NGS9srLyzFgwACp92VkZOD69esICQmR2y9XV1dcu3YNq1evhrW1NaZMmYKQkBA8e/asTp+tra3V+iw0pWm2nVpzPuK1wQFRxL59+zauXr0KNzc3NG/eXKW2srKyEBQUhKqqKtjY2GD37t1yl3utrq5GdXW15LUqJX8Mjip/Kam0DjFWXCt4GFClD1tbW0RGRiIyMhJDhw5Fnz598PjxYzg6OsLR0bHO8aNHj8bMmTMxcuRI3Lx5EyNGjJDsCwgIwK5du+Dh4QFzc9W+bq2trTFgwAAMGDAAMTExaN++PbKyshAQECB1nL+/P+7evYvs7GyZdz+vvPJKnTmukydPwsfHR+ZczSuvvCKZ6xLf/Vy+fBnFxcVaXYpbrTufefPmoaKiQvK6cePGCAgIQJMmTTBv3jyV2mrXrh0yMjJw9uxZTJ48GVFRUbh8+bLMYxctWgQ7OzvJT+3bQqNjhH8pCVGZkS3suGzZMmzZsgVXr15FdnY2duzYAWdnZ9jb28t9zzvvvIOysjJMnjwZYWFhaNmypWRfTEwMHj9+jJEjRyItLQ05OTnYv38/xo0bp/CRlPXr1+P333/HpUuXcPPmTWzcuBHW1tZwd3evc2xoaChCQkIwZMgQHDx4ELm5udi3bx+SkpIAAP/73/9w+PBhzJ8/H9nZ2YiPj8cPP/yAGTNmyDx3REQE/Pz8MHr0aKSnpyM1NRVjx45FaGgounbtyvGTVE6t4PPVV1+hvLy8zvaKigrJOuJcWVhYoG3btujSpQsWLVqETp06YeXKlTKPnTVrFkpKSiQ/8rJQjIKR/aUkRC3iSiCQVxeSES0RYiCVPvh8PpYuXYquXbsiMDAQt27dwt69e8Hjyf+q5PP5GDBgADIzM6WG3ACgZcuWOHnyJAQCAXr16gU/Pz9Mnz4d9vb2Ctu0t7fHr7/+iuDgYPj7++PQoUP466+/0KyZ7MX4du3ahcDAQIwcORK+vr6YOXOmJLgFBARg+/bt2Lp1Kzp27Igvv/wS8+bNk5npBohSz/fs2QMHBweEhIQgIiICbdq0wbZt25R8eqpRa0kFHo+HBw8e1JlsOnLkCCIjI1FUVKR2h8LDw+Hm5ob169crPZbTkgqGSrIkg5KVSrksuUCIIZOsewXIrPTBZV0rYnJUGoR0cHAAwzBgGAY+Pj5SVa4FAgHKy8sxadIkzu3NmjULffv2hZubG8rKyrB582YkJydj//79qnTLOOl6pVJC9IVLJRDS4Kh05xMfHw+WZfHee+9hxYoVsLOzk+yzsLCAh4eHSplq48ePx+HDh5Gfnw87Ozv4+/sjLi4OPXv25PR+o77zEaOVSklDQQ9Tk1rUGnZLSUlBcHCwytkb2mYSwQegv5SEkAZH7WW0c3JysG7dOuTk5GDlypVwdHSUPO/ToUMHbfdTJpMJPoQQ0sCole2WkpICPz8/nD17Fn/++ack8y0zMxNz5szRagcJIYSYHrWCz6effooFCxbg4MGDUmW0w8PDG05pHEIIIWpTK/hkZWVh8ODBdbY7OjpKlQonhBBCZFEr+Njb20tqu9V24cIFtGrVSuNOEUIIMW1qBZ8RI0YgLi4OBQUFYBgGQqEQJ0+exIwZMzB27FjlDRBCCGnQ1Ao+CxcuxCuvvAI3NzeUl5fD19cXISEh6N69Oz7//HNt95EQQupN7ZVMtS05ORkMw6C4uFjjtlTt5/r16xXWpNM3lVKthUIhvvnmGyQmJqKmpgb+/v4YMmQIysvL0blzZ3h7e9dnX+ugVGtCiCLR0dEoLi5W+KVdUFAABwcHWFpaav38NTU1ePz4MZycnKQqwqhD1X5WVlairKxMZiVuQ6DSU6Jff/015s6di4iICFhbW2Pz5s1gWRZr166tr/4RQki9qKmpgYWFBZydnevtHMraFwgEYBhGYZFRMVX7aW1trbe1frhQadjtjz/+wOrVq7F//34kJCTgr7/+wqZNmyAUCuurf4QQEyEQCpBWkIa9N/cirSANAh0vlNijRw9MnToV06dPR/PmzdG7d28A0sNZNTU1mDp1KlxcXGBlZQV3d3csWrRIZnvZ2dlgGAZXr16V2r58+XJ4eXkBqDvsJh4KS0xMhK+vLywtLZGXl4f8/Hz0798f1tbW8PT0xObNm+Hh4YEVK1ZI2q3dz1u3boFhGPz5558ICwtD48aN0alTJ5w+fVpyvKxht7/++guBgYGwsrJC8+bNpbKWN2zYgK5du4LP58PZ2RmjRo1CYWGhqh8zZyoFn7y8PPTr10/yOiIiAgzD4P59RYuiEUIaukO3D6H3rt54b/97iDseh/f2v4feu3rj0O1DOu1HfHw8LCwscPLkSfz000919q9atQqJiYnYvn07rl27hk2bNsHDw0NmWz4+PujatSs2bdoktX3Tpk0YNWqU3D5UVFRgyZIl+O233/Dvv//C0dERY8eOxf3795GcnIxdu3bhl19+4fTF/9lnn2HGjBnIyMiAj48PRo4cKXe57X/++QeDBw9Gv379cOHCBRw+fBivvfaaZP+zZ88wf/58ZGZmIiEhAbdu3ZK77II2qDTs9vz5c1hZWUlta9SokcylXQkhBBAFntjkWLAvLR1SWFGI2ORYLOuxDBHuETrpi7e3N5YuXSp3f15eHry9vfHGG2+AYRiZi7fVNnr0aPzwww+YP38+ANHd0Pnz57Fx40a573n27BlWr16NTp06AQCuXr2KQ4cOIS0tTbJY22+//cZpDn3GjBno378/ANE6ax06dMCNGzfQvn37Osd+/fXXGDFihNSaa+I+AMB7770n+f9t2rTBqlWrEBgYiPLyctjY2Cjti6pUuvNhWRbR0dF45513JD9VVVWYNGmS1DZCCAFEQ22LUxfXCTwAJNuWpC7R2RBcly5dFO6Pjo5GRkYG2rVrh2nTpuHAgQOSfZMmTYKNjY3kBxA9dnLr1i1JZZdNmzYhICBA5pe/mIWFBfz9/SWvr127BnNzc6nlsdu2bQsHBwel11O7HRcXFwCQe8eUkZGBt956S25b58+fx4ABA+Dm5gY+n4/Q0FAAooBcH1QKPlFRUXB0dJRayvrdd99Fy5YtpbYRQggApBem40GF/KXgWbAoqChAemG6TvrTpEkThfsDAgKQm5uL+fPno7KyEsOHD8fQoUMBAPPmzUNGRobkBxAlAYSHh2Pz5s0AgM2bN9dZzfRl1tbWGme+iTVq1Ejy/8VtypuDV5R88PTpU/Tu3Ru2trbYtGkT0tLSsHv3bgCiebD6oNKw27p16+qlE4QQ01RUwW1VY67H6YKtrS0iIyMRGRmJoUOHok+fPnj8+DEcHR1lpi2PHj0aM2fOxMiRI3Hz5k2MGDFCpfO1a9cOz58/x4ULFyR3Zjdu3MCTJ0+0cj1i/v7+OHz4MMaNG1dn39WrV/Ho0SMsXrwYrq6uAIBz585p9fwvU+shU0II4aJF4xZaPa6+LVu2DFu2bMHVq1eRnZ2NHTt2wNnZWeHDmu+88w7KysowefJkhIWFoWXLliqds3379oiIiMDEiRORmpqKCxcuYOLEiVq9QwKAOXPmYMuWLZgzZw6uXLmCrKwsLFmyBADg5uYGCwsLfP/997h58yYSExMl81j1hYIPIaTeBDgGwKmxExjI/hJlwMC5sTMCHANk7tc1Pp+PpUuXomvXrggMDMStW7ewd+9ehc/h8Pl8DBgwAJmZmUqH3OT5448/4OTkhJCQEAwePBgTJkwAn8+vk+CliR49emDHjh1ITEzEq6++ivDwcKSmpgIAWrRogfXr12PHjh3w9fXF4sWL8e2332rt3LKovZicIaAKB4QYPnG2GwCpxANxQNJltpuxuHv3LlxdXXHo0CGFSQLGjIIPIaTeHbp9CItTF0slHzg3dkbca3EUeAAcOXIE5eXl8PPzQ35+PmbOnIl79+4hOztbKqnAlKiUcEAIIeqIcI9AmGsY0gvTUVRRhBaNWyDAMQBmPDN9d80gPHv2DLNnz8bNmzfB5/PRvXt3bNq0yWQDD0B3PoQQQvSAEg4IIYToHAUfQgghOkfBhxBCiM7pNfgsWrQIgYGB4PP5cHR0xKBBg3Dt2jV9dokQQogO6DX4pKSkICYmBmfOnMHBgwfx7Nkz9OrVC0+fPtVntwghhNQzg8p2KyoqgqOjI1JSUhASEqL0eMp2I4QQ42RQz/mUlJQAAJo2bSpzf3V1NaqrqyWvS0tLddIvYhgEQhapuY9RWFYFR74VXvNsCjOe9mpfGUsfCDEFBnPnIxQK8fbbb6O4uBgnTpyQeczcuXOlFkISozsf05d0KR9f/XUZ+SVVkm0udlaYM8AXfTq6NJg+EGIqDCb4TJ48Gfv27cOJEyfQunVrmcfIuvNxdXWl4GPiki7lY/LG9DrLkYnvN9a8G1DvX/6G0AdCTIlBpFpPnToVf//9N44ePSo38ACApaUlbG1tpX6IaRMIWXz112UZ62BCsu2rvy5DIKy/f0MZQh8IMTV6DT4sy2Lq1KnYvXs3jhw5Ak9PT312hxig1NzHUsNcL2MB5JdUITX3sUn3gRBTo9eEg5iYGGzevBl79uwBn89HQUEBAMDOzk7hkq+k4Sgsk/+lr85xxtoHQkyNXu981qxZg5KSEvTo0QMuLi6Sn23btumzW8SAOPK5LabF9Thj7QMhpkavdz4GkutADISsNObXPJvCxc4KBSVVMudcGADOdqJj64sqfaBUbEK4MZhsN3XQQ6amQ1EaMwBM2pgu970/6SjbTVkfAFAqNiEcGUS2G2nYxGnML0/qF5RUYfLGdFzIe6KnnnF3Ie+JwmtIupSvp54RYpjozodwomw4ictwk6xjAOCNJUfkZpMxABgGkJfFLB7yOhEXDgD1MuQlELJa6yMNwREiYlDldYhhUvZkP5cn/+UdMyLQTWkas6J/HonTnH84cgNb0/LqZciLS6o1lz6m5j5GkFczjfpCiKmgOx+ikLIn+yeGeOKXY7kKn/wHILeN+vzDp63qA3sy7uGjrRka92fliFcx8NVWGrdDiCmgOx8iF5cn+389XjfwiPczEE3AsyyrsI36UrsPPX2d1R7yat7EUiv9oVRsQv5DwYfIpWy4CZA/zwH8N9ykT6oOeVXWCLBw72XcelQBj2aNMbuf73+3UGpSNR28vtO1KR2cGAIKPkQuXT+x//IwnDaH5bhcy4Q/0nDwcqHk9fHrwIYzefBrxX1IV9Y1AMCcAb6cvuDru3I2VeYmhoJSrYlcuhwm+jjCG8520udztrPC0AD5hWZVoexaXg48tWXd47ZulLxr4DrnpCzlXNN07fpunxBV0J0PAaBedQGuWjRphIdPnymsDjA13BuTe7TFhtO3cPtxBdybNsaYIA9U1giwM/2uBmcHeAzQxd0BgOzrrHkulBt4VDnH5B5tMTXcW60hLWXza7XnrgDVU8pVaZ+G4IguUPAhCodi5gzwVfhkPxcu9tYoevpM5j4WoiGpg5cL6vThtxO58HGy0ejcgGhe6vztJyiprJF5nd6O2jtHkFcztdKpuVbOVjelXJXK3JQOTnSBgk8DJy+VWjwU49da8xT2h09rFO6/kPdEZrp2QUmV1hIWDl0uwNqTt+r1HJrMkXF97/JD2XW2iX9Xiob3qDI3MTQ059OAKRuKYQFcvMttvkORR+WKg4+idG1t+TP9Xr2fQ5M5Mk3ey2VBO6rMTQwNBR8tEAhZnM55hD0Z93A655HRrGjJJZVaG6qfCxXu18XH9aRS9rCfNjAQDX2Jq1qr82dBPL+m7myLsgXtlLVf+xoI0QUadtOQMaeu6mKIxbWpNe48rqz389Q3/9a2yHpxFygvlVrWvBXXPwtmPAZzBvhi8sZ0jVLO5f1OlbUvvgZKNiC6Qnc+GjD21FVtDbE0bdJI5nb/1rZYOqSTVs6hC13c7WVu7+nriMSpb2LNuwFyU6kBaPxnoU9HF7nn+DjCm9M1KPqdKmpf0xJEhKiKarupiUulY0OvZCy+Bk1TqS/N7Q0A+HjbBeQ9qYSbgzWWR3aGjZU5KmsEeOXLJKVtyPvXvbYeNOWS7n0iLhw1z4V1KhxYW5hJjlW3MrcqlbcVnUPZgnZc/rxRhQNiCGjYTU2mkLqqraGerHslCPJqhl+jAuvs23z2Nqc2xM+ayBoO6unrqPFzOKHtHLEr/Z7SISdrCzPMH+Qntx0zHlPn93k65xHHNOnr2Jp2R+mwnKxziPuojWEzee0Toks07KYmU0ldVTQUMz7Yg1Mbiq7x9uMKTm2E+rSQOxz069hAfBDiiZe/V3kM0KEln1P7jS3N623IiXua9PV6G5ajYTNibOjOR02mlLrap6MLevo61xmKSc19jN9P3lL6fkXX6OrQmFMf3mjbHGujA+UOB83q54v/9WpfpwLChtO38O/9K0rbd2/aWO51ajrkpGmatCrVBerrGgjRNQo+alJWekbVSsb6JmsoRhvX2N6Z251Je2e+0uEgC3Mexr/ZRmrbmCAPfL33isJ0bR4jOg6onyEnTcsQqTpES8NmxBTQsJuaxPMlQN2K+6aSuiq+RnlfqOLSOIqu8XGF4gdMVT3uZRbmPEx401PhMRPe9ISFef39UefyZ4ELQx+iJUSbKPhogMbgldPF8OSsfr5y54Q+CPHErH6+arfNleI0aR9ObRjDEC0h2kKp1lpgqqmr2kgnV5bOrc2U9JrnwjpzQi/f8ehjoTZAe2nShJgKvc75HDt2DN988w3Onz+P/Px87N69G4MGDdJnl9RiqmPw2kgn1+WT9bLmhGrTRTWK+k6TJsRU6HXY7enTp+jUqRN+/PFHfXaDyKGtdHJDGJ7UdzUKQ/gMCDEker3z6du3L/r27avPLhAFtDlfo88UYUNZSI3SpAn5j1GlWldXV6O6ulryurRU83L/RD5tp5Pra3jSkKpRmOoQLSGqMqpst0WLFsHOzk7y4+rqqu8umTRTSSc3lWoUhJgSowo+s2bNQklJieTnzp07+u6SyTOFuQpTqkZBiKkwqmE3S0tLWFpa6rsbDY6xz1WYWjUKQkyBUQUfoj/GPFdBC6kRYnj0OuxWXl6OjIwMZGRkAAByc3ORkZGBvLw8fXaLmCBTGD4kxJTotcJBcnIywsLC6myPiorC+vXrlb7fUCocEONhqtUoCDE2VF6HEEKIzhlVthshhBDTQMGHEEKIzlHwIYQQonNGnWotnq6iMjuE1C8+nw+GocQMoj1GHXzKysoAgMrsEFLPKKmHaJtRZ7sJhULcv39f6b/KSktL4erqijt37tBfIA3Q56gdxvg50p0P0TajvvPh8Xho3bo15+NtbW2N5i+7IaPPUTvocyQNGSUcEEII0TkKPoQQQnSuQQQfS0tLzJkzhypia4g+R+2gz5EQI084IIQQYpwaxJ0PIYQQw0LBhxBCiM5R8CGEEKJzJh18Fi1ahMDAQPD5fDg6OmLQoEG4du2avrtldNasWQN/f3/JcylBQUHYt2+fvrtl9BYvXgyGYTB9+nR9d4UQnTPp4JOSkoKYmBicOXMGBw8exLNnz9CrVy88ffpU310zKq1bt8bixYtx/vx5nDt3DuHh4Rg4cCD+/fdffXfNaKWlpeHnn3+Gv7+/vrtCiF40qGy3oqIiODo6IiUlBSEhIfrujlFr2rQpvvnmG4wfP17fXTE65eXlCAgIwOrVq7FgwQK8+uqrWLFihb67RYhOmfSdz8tKSkoAiL44iXoEAgG2bt2Kp0+fIigoSN/dMUoxMTHo378/IiIi9N0VQvTGqGu7qUIoFGL69OkIDg5Gx44d9d0do5OVlYWgoCBUVVXBxsYGu3fvhq+vr767ZXS2bt2K9PR0pKWl6bsrhOhVgwk+MTExuHTpEk6cOKHvrhildu3aISMjAyUlJdi5cyeioqKQkpJCAUgFd+7cwUcffYSDBw/CyspK390hRK8axJzP1KlTsWfPHhw7dgyenp767o5JiIiIgJeXF37++Wd9d8VoJCQkYPDgwTAzM5NsEwgEYBgGPB4P1dXVUvsIMWUmfefDsiw+/PBD7N69G8nJyRR4tEgoFKK6ulrf3TAqb731FrKysqS2jRs3Du3bt0dcXBwFHtKgmHTwiYmJwebNm7Fnzx7w+XwUFBQAAOzs7GBtba3n3hmPWbNmoW/fvnBzc0NZWRk2b96M5ORk7N+/X99dMyp8Pr/OfGOTJk3QrFkzmockDY5JB581a9YAAHr06CG1fd26dYiOjtZ9h4xUYWEhxo4di/z8fNjZ2cHf3x/79+9Hz5499d01QoiRahBzPoQQQgxLg3rOhxBCiGGg4EMIIUTnKPgQQgjROQo+hBBCdI6CDyGEEJ2j4EMIIUTnKPgQQgjROQo+hBBCdI6CD1EZwzBISEjQqI3o6GgMGjRI4TE9evRQusT0+vXrYW9vr1FfCCG6R8HHiBQVFWHy5Mlwc3ODpaUlnJ2d0bt3b5w8eVJvferWrRsmTZokte2nn34CwzBYv3691Pbo6Gi8+eabAICVK1fW2a+Mh4eH2it+lpaW4rPPPkP79u1hZWUFZ2dnRERE4M8//wQV+SBE90y6tpupGTJkCGpqahAfH482bdrgwYMHOHz4MB49eqS3PoWFhWH37t1S244ePQpXV1ckJydL1dBLTk5GVFQUAFFxV10pLi7GG2+8gZKSEixYsACBgYEwNzdHSkoKZs6cifDwcLp7IkTXWGIUnjx5wgJgk5OTFR4zfvx4tnnz5iyfz2fDwsLYjIwMyf45c+awnTp1Yn/66Se2devWrLW1NTts2DC2uLhYckxqaiobERHBNmvWjLW1tWVDQkLY8+fPS50HALt7926WZVl2//79LAA2Pz9fst/JyYn98ccfWXd3d8m2mzdvsgDYo0ePsizLslFRUezAgQMl+8vLy9kxY8awTZo0YZ2dndlvv/2WDQ0NZT/66COWZVk2NDSUBSD1w7Isu27dOtbOzo5NSkpi27dvzzZp0oTt3bs3e//+fUnbkydPZps0acLeu3evzmdWVlbGPnv2jGVZlnV3d2fnz58v6Yebmxu7Z88etrCwkH377bfZJk2asH5+fmxaWprc3wEhhBsadjMSNjY2sLGxQUJCgtx1dIYNG4bCwkLs27cP58+fR0BAAN566y08fvxYcsyNGzewfft2/PXXX0hKSsKFCxcwZcoUyf6ysjJERUXhxIkTOHPmDLy9vdGvXz+UlZXJPGdwcDAaNWqEo0ePAgAuX76MyspKjB8/Ho8ePUJubi4A0d2QlZUVgoKCZLbzySefICUlBXv27MGBAweQnJyM9PR0yf4///wTrVu3xrx585Cfn4/8/HzJvoqKCnz77bfYsGEDjh07hry8PMyYMQOAaN2hrVu3YvTo0WjZsqXMz9Xc/L8BgOXLlyM4OBgXLlxA//79MWbMGIwdOxbvvvsu0tPT4eXlhbFjx9JQHSGa0nf0I9zt3LmTdXBwYK2srNju3buzs2bNYjMzM1mWZdnjx4+ztra2bFVVldR7vLy82J9//pllWdGdj5mZGXv37l3J/n379rE8Hk/qzqU2gUDA8vl89q+//pJsQ607H5Zl2eDgYHbixIksy7Lsjz/+yPbr149lWZbt1asXu3btWpZlWXbMmDFsWFiY5D2173zKyspYCwsLdvv27ZL9jx49Yq2trSV3PiwrujNZvny5VP/WrVvHAmBv3Lgh2fbjjz+yTk5OLMuy7IMHD1gA7LJly2ReX23u7u7su+++K3mdn5/PAmC/+OILybbTp0/XudMjhKiO7nyMyJAhQ3D//n0kJiaiT58+SE5ORkBAANavX4/MzEyUl5ejWbNmkrskGxsb5ObmIicnR9KGm5sbWrVqJXkdFBQEoVCIa9euAQAePHiACRMmwNvbG3Z2drC1tUV5eTny8vLk9qtHjx5ITk4GIJrXEa+fFBoaKrU9LCxM5vtzcnJQU1OD119/XbKtadOmaNeuHafPpXHjxvDy8pK8dnFxQWFhIQCofIfi7+8v+f9OTk4AAD8/vzrbxO0TQtRDCQdGxsrKCj179kTPnj3xxRdf4P3338ecOXMwZcoUuLi4SL7sa1NlMj0qKgqPHj3CypUr4e7uDktLSwQFBaGmpkbue8LCwvD111/j3r17SE5Olgx5hYaG4ueff0ZOTg7u3LmD8PBwVS+Xk0aNGkm9ZhhGEnRatGgBe3t7XL16VeW2GIaRu00oFGrUZ0IaOrrzMXK+vr54+vQpAgICUFBQAHNzc7Rt21bqp3nz5pLj8/LycP/+fcnrM2fOgMfjSe4yTp48iWnTpqFfv37o0KEDLC0t8fDhQ4V96N69OywsLLB69WpUVVWhS5cuAIDAwEAUFRVh7dq1aNKkCV577TWZ7/fy8kKjRo1w9uxZybYnT54gOztb6jgLCwsIBAKVPh8ej4cRI0Zg06ZNUtctVl5ejufPn6vUJiFEcxR8jMSjR48QHh6OjRs34uLFi8jNzcWOHTuwdOlSDBw4EBEREQgKCsKgQYNw4MAB3Lp1C6dOncJnn32Gc+fOSdqxsrJCVFQUMjMzcfz4cUybNg3Dhw+Hs7MzAMDb2xsbNmzAlStXcPbsWYwePRrW1tYK+2ZtbY1u3brh+++/R3BwMMzMzACIgkXt7S/foYjZ2Nhg/Pjx+OSTT3DkyBFcunQJ0dHR4PGk/3h6eHjg2LFjuHfvntKAWNvXX38NV1dXvP766/jjjz9w+fJlXL9+HWvXrkXnzp1RXl7OuS1CiHbQsJuRsLGxweuvv47ly5cjJycHz549g6urKyZMmIDZs2eDYRjs3bsXn332GcaNG4eioiI4OzsjJCREMk8BAG3btsU777yDfv364fHjx/i///s/rF69WrL/999/x8SJExEQEABXV1csXLhQMoymSFhYGI4dOyaZ7xELDQ3F0aNH5c73iH3zzTcoLy/HgAEDwOfz8b///Q8lJSVSx8ybNw8ffPABvLy8UF1dzXk+p2nTpjhz5gwWL16MBQsW4Pbt23BwcICfnx+++eYbnT5zRAgRYVhVZ2SJ0Zo7dy4SEhKQkZGh764QQho4GnYjhBCicxR8CCGE6BwNuxFCCNE5uvMhhBCicxR8CCGE6BwFH0IIITpHwYcQQojOUfAhhBCicxR8CCGE6BwFH0IIITpHwYcQQojOUfAhhBCic/8Paah62zAlgJQAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 443x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.FacetGrid(irisdf,hue='Species',height=3).map(plt.scatter,\"SepalWidthCm\" , \"PetalLengthCm\").add_legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9e53f467-70a5-4bdb-b975-0d2038955608",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1300x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize =(13,6))\n",
    "sns.countplot(x='SepalLengthCm', data=irisdf, hue= irisdf['Species'], palette= 'winter')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "850ec332-517c-42b8-853a-ac62bd5165c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1300x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize =(13,6))\n",
    "sns.countplot(x='SepalWidthCm', data=irisdf, hue= irisdf['Species'], palette= 'autumn')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "06dece50-4a66-4317-959d-f335bbbf6c31",
   "metadata": {},
   "outputs": [],
   "source": [
    "flower_mapping= {'Iris-setosa': 0, 'Iris-versicolor' : 1, 'Iris-virginica' :2}\n",
    "irisdf['Species'] = irisdf ['Species'].map (flower_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3b834376-f2b2-460a-8793-49423840144a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  Species\n",
       "0   1            5.1           3.5            1.4           0.2        0\n",
       "1   2            4.9           3.0            1.4           0.2        0\n",
       "2   3            4.7           3.2            1.3           0.2        0\n",
       "3   4            4.6           3.1            1.5           0.2        0\n",
       "4   5            5.0           3.6            1.4           0.2        0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d131ae22-c4df-4d94-b35e-86c6b816780f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>146</td>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>147</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>148</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>149</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>150</td>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  Species\n",
       "145  146            6.7           3.0            5.2           2.3        2\n",
       "146  147            6.3           2.5            5.0           1.9        2\n",
       "147  148            6.5           3.0            5.2           2.0        2\n",
       "148  149            6.2           3.4            5.4           2.3        2\n",
       "149  150            5.9           3.0            5.1           1.8        2"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "irisdf.tail()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2914fb9d-87ac-4b30-b1e5-bc5182b8f584",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=irisdf[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm','PetalWidthCm']].values\n",
    "y=irisdf[['Species']].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "54f86ed1-a7a9-46bc-a66d-122afdd16af6",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = lr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b7625f21-5abe-4687-807c-6f0899e5fda2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "80ff5ee7-7cab-4df6-8804-3886ad0d761f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int64)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expected = y\n",
    "predicted = model.predict(x)\n",
    "predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d6484baa-c347-4977-b8fd-f152c72d3eb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        50\n",
      "           1       0.98      0.94      0.96        50\n",
      "           2       0.94      0.98      0.96        50\n",
      "\n",
      "    accuracy                           0.97       150\n",
      "   macro avg       0.97      0.97      0.97       150\n",
      "weighted avg       0.97      0.97      0.97       150\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(expected, predicted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8b776287-2eda-4cc2-9654-0e8359038a73",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[50  0  0]\n",
      " [ 0 47  3]\n",
      " [ 0  1 49]]\n"
     ]
    }
   ],
   "source": [
    "print(metrics.confusion_matrix(expected, predicted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28c5ad1c-ed5c-4ff5-b46a-c227932f9c8b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16344f2f-ad57-4d55-80d0-4876d6817e29",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
